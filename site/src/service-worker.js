import { timestamp, files, shell, routes } from '@sapper/service-worker';

const ASSETS = `cache${timestamp}`;
// Exclude images, documents, and configuration files from the service worker; we don't want to download the entire
// site to the user's device; it's a waste of bandwidth and storage.
const fileExclusions = ["^\\/CNAME$", ".*\\.(jpg|jpeg|png|pdf)(\\?.*)?$"];

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory,
// `filteredFiles` is an array of files absent those matching any of the `fileExclusions` regexps.
const filteredFiles = files.filter(file =>
    !fileExclusions.some(exclusion => new RegExp(exclusion, "i").test(file))
);
const to_cache = shell.concat(filteredFiles);
const cached = new Set(to_cache);

console.log(shell, files, routes);

self.addEventListener('install', event => {
	event.waitUntil(
		caches
			.open(ASSETS)
			.then(cache => cache.addAll(to_cache))
			.then(() => {
				self.skipWaiting();
			})
	);
});

self.addEventListener('activate', event => {
	event.waitUntil(
		caches.keys().then(async keys => {
			// Delete old caches
			for (const key of keys) {
				if (key !== ASSETS) {
					await caches.delete(key);
				}
			}

			self.clients.claim();
		})
	);
});

self.addEventListener('fetch', event => {
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const url = new URL(event.request.url);

	// Don't try to handle e.g. data: URIs
	if (!url.protocol.startsWith('http')) return;

	// Ignore dev server requests
	if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

	// Always serve static files and bundler-generated assets from cache
	if (url.host === self.location.host && cached.has(url.pathname)) {
		event.respondWith(caches.match(event.request));
		return;
	}

	if (event.request.cache === 'only-if-cached') return;

	// For everything else, try the cache first, falling back to network
	event.respondWith(
		caches
			.open(`offline${timestamp}`)
			.then(async cache => {
				let response = await cache.match(event.request);
				if (response) {
					return response;
				}

				response = await fetch(event.request);
				cache.put(event.request, response.clone());
				return response;
			})
	);
});
